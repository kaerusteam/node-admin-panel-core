"use strict";

var console = require("../../logger.js"),
	db = require("../../db.js"),
	ObjectID = require('mongodb').ObjectID,
	convertFilters = require("../../db_modules/filters.js"),
	async = require("async"),
	uuid = require('node-uuid')
	;

var <%=moduleName%> = function() {
	this.db 			= db.getInstance("main");
	this.schema 		= require("./manifest.json").exports.schema;
	this.validator 		= require('jsonschema').Validator;
}

/**
 * Validate input params 
 * @param		{object} params     input params for method
 * @param		{string} methodName method for validate
 * @return		{string}			error in string format 
 */
<%=moduleName%>.prototype.validate = function(params, methodName) {
	var self = this;
	var v = new self.validator();
	var errors = v.validate(params, self.schema[methodName]).errors;
	if (errors.length) {
		var error = "";
		for (var i = 0; i < errors.length; i++) {			
			if (!i) {
				error += errors[i].stack;
			} else if (i != error.length -1) {
				error += "; " + errors[i].stack;
			} else	if (i == errors.length - 1) {
				error = error + "."
			}
		}
		return error;		
	} 
	return null;
}

/**
 * Create new entry of given object 
 * @param		{object} params     input params for method
 * @param		{function}			handler for method response
 */
<%=moduleName%>.prototype.create<%=moduleName%> = function(params, callback) {
	var self = this;
	var error = self.validate(params, "create<%=moduleName%>");
	if (error){
		callback({code : 400, message : "Incorrect input data", internalMessage : error});
	} else {
		<%if (dbType == "mongodb"){%>
		self.db.collection("<%=basename%>").insert(params, {safe : true}, function(err,<%=basename%>){
			if (err) {
				console.error(err);
				callback({code : 500,message : "Error with db request"});
			} else {
				callback(null, <%=basename%>);
			}
		});	
		<%} else {%>
		//Functionality for given dbType may be release in future version
		<%}%>
	}
}

/**
 * Update specified entry of given object 
 * @param		{object} params     input params for method
 * @param		{string} params._id  entry id in table
 * @param		{function}			handler for method response
 */
<%=moduleName%>.prototype.update<%=moduleName%> = function(params, callback) {
	var self = this;
	var error = self.validate(params, "update<%=moduleName%>");
	if (error){
		callback({code : 400, message : "Incorrect input data", internalMessage : error});
	} else {
		<%if (dbType == "mongodb"){%>
		var updateId = new ObjectID(params._id);
		delete params._id;
		self.db.collection("<%=basename%>").update({_id : updateId},{$set : params}, {safe : true}, function(err,<%=basename%>){
			if (err) {
				console.error(err);
				callback({code : 500,message : "Error with db request"});
			} else {
				callback(null, <%=basename%>);
			}
		});	
		<%} else {%>
		//Functionality for given dbType may be release in future version
		<%}%>
	}
}

/**
 * Read specified entry of given object 
 * @param		{object} params     input params for method
 * @param		{string} params._id  entry id in table
 * @param		{function}			handler for method response
 */
<%=moduleName%>.prototype.read<%=moduleName%> = function(params, callback) {
	var self = this;
	var error = self.validate(params, "read<%=moduleName%>");
	if (error){
		callback({code : 400, message : "Incorrect input data", internalMessage : error});
	} else {
		<%if (dbType == "mongodb"){%>
		self.db.collection("<%=basename%>").findOne({_id : new ObjectID(params._id)}, function(err,<%=basename%>){
			if (err) {
				console.error(err);
				callback({code : 500,message : "Error with db request"});
			} else {
				callback(null, <%=basename%>);
			}
		});	
		<%} else {%>
		//Functionality for given dbType may be release in future version
		<%}%>
	}
}

/**
 * Remove specified entry of given object 
 * @param		{object} params     input params for method
 * @param		{string} params._id  entry id in table
 * @param		{function}			handler for method response
 */
<%=moduleName%>.prototype.delete<%=moduleName%> = function(params, callback) {
	var self = this;
	var error = self.validate(params, "delete<%=moduleName%>");
	if (error){
		callback({code : 400, message : "Incorrect input data", internalMessage : error});
	} else {
		<%if (dbType == "mongodb"){%>
		self.db.collection("<%=basename%>").remove({_id : new ObjectID(params._id)}, function(err,<%=basename%>){
			if (err) {
				console.error(err);
				callback({code : 500,message : "Error with db request"});
			} else {
				callback(null, <%=basename%>);
			}
		});	
		<%} else {%>
		//Functionality for given dbType may be release in future version
		<%}%>
	}
}

/**
 * Read entry's list by filter
 * @param		{object} params     input params for method
 * @param		{function}			handler for method response
 */
<%=moduleName%>.prototype.readList<%=moduleName%> = function(params, callback) {
		var self = this;
	var error = self.validate(params, "readList<%=moduleName%>");
	if (error){
		callback({code : 400, message : "Incorrect input data", internalMessage : error});
	} else {
		convertFilters.convertQuery("<%=dbType%>",params, function(err,filters) {
			if (err) {
				callback(err);
			} else {
				<%if (dbType == "mongodb"){%>
				if (!filters.filters.length || filters.filters.length == 1){
					//read from one table 
					var tableName = filters.filters.length ? filters.filters[0]._table : "<%=basename%>";
					var query = filters.filters.length ? filters.filters[0].query : {};
					var columns = filters.columns || {};
					self.db.collection(tableName).find(query, columns, function(err, result){
						if (err) {
							callback({code : 500, message : "Error with db work", internalMessage : error});
						} else {
							result.sort(filters.sorting).skip(filters.offset).limit(filters.limit).toArray(function(err, resultData){
								if (err) {
									callback({code : 500, message : "Error with db work", internalMessage : error});
								} else {
									result.count(function(err, count){
										var data = {
											count : count,
											list : resultData
										};
										callback(null, data);
									});
								}
							});
						}
					});
				} else {
					//read from two or more table 
					var uuidBuffer = new Buffer(16);
					uuid.v4(null, uuidBuffer, 0); 
					var tmpTable = "<%=basename%>" + uuidBuffer.toString('hex').toUpperCase();
					async.each(filters.filters,function(filter, callback){
						var map = function(){
							var id = (_filter._table == "<%=basename%>")? this._id : ObjectId(this.<%=basename%>Id);
							var object = {};
							for (var key in _filter.columns) {
								object[_filter._table + "_" + key] = this[key];
							}
							emit(id,object);
						}
						var reduce = function(key,values){
							var object = {};
							for (var i = 0; i < values.length; i++) {
								for (var key in values[i]) {
									object[key] = values[i][key];
								}
							}
							return object;
						}
						self.db.collection(filter._table).mapReduce(map,reduce,{out : {reduce: tmpTable}, query : filter.query, scope : {_filter : filter},jsMode : true},function(err,collection){
							if (err){
								console.error(err);
								callback(true);
							} else {
								callback(false);
							}
						});
					}, function(err){
						if (err) {
							console.error(err);
							callback({code : 500, message : "Error with db work", internalMessage : err});
						} else {
							self.db.collection(tmpTable).find({}, filters.columns,function(err, result){
								result.sort(filters.sorting).skip(filters.offset).limit(filters.limit).toArray(function(err, resultData){
									result.count(function(err, count){
										self.db.collection(tmpTable).drop(function(err,dropResult){
											if (err) {
												callback({code : 500, message : "Error with db work", internalMessage : err});
											} else {
												var data = {
													count : count,
													list : resultData.map(function(x){
														var res = x.value;
														res._id = x._id.toString();
														return res;
													})
												};
												callback(null, data);
											}
										});									
									});
								});
							});
						}
					});
				}
				<%} else {%>
				//Functionality for given dbType may be release in future version
				<%}%>
			}
		});
	}
}

module.exports = new <%=moduleName%>();